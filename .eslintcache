[{"D:\\Real Loc\\Siramta-Frontend\\src\\index.js":"1","D:\\Real Loc\\Siramta-Frontend\\src\\App.js":"2","D:\\Real Loc\\Siramta-Frontend\\src\\reportWebVitals.js":"3","D:\\Real Loc\\Siramta-Frontend\\src\\routes.js":"4","D:\\Real Loc\\Siramta-Frontend\\src\\Components\\MySqlCluster\\MySqlCluster.js":"5","D:\\Real Loc\\Siramta-Frontend\\src\\Components\\MySqlCluster\\MySqlClusterDetail.js":"6","D:\\Real Loc\\Siramta-Frontend\\src\\Components\\PostgreSqlCluster\\PostgreSqlClusterDetail.js":"7","D:\\Real Loc\\Siramta-Frontend\\src\\Components\\MongodbCluster\\MongodbClusterDetail.js":"8","D:\\Real Loc\\Siramta-Frontend\\src\\Components\\Home\\Home.js":"9","D:\\Real Loc\\Siramta-Frontend\\src\\Components\\PostgreSqlCluster\\PostgreSqlCluster.js":"10","D:\\Real Loc\\Siramta-Frontend\\src\\Components\\MongodbCluster\\MongodbCluster.js":"11","D:\\Real Loc\\Siramta-Frontend\\src\\ApiService.js":"12"},{"size":640,"mtime":1613841097022,"results":"13","hashOfConfig":"14"},{"size":757,"mtime":1613406083854,"results":"15","hashOfConfig":"14"},{"size":375,"mtime":1613133642027,"results":"16","hashOfConfig":"14"},{"size":1155,"mtime":1613579298196,"results":"17","hashOfConfig":"14"},{"size":11364,"mtime":1613841744241,"results":"18","hashOfConfig":"14"},{"size":2989,"mtime":1613841408726,"results":"19","hashOfConfig":"14"},{"size":3129,"mtime":1613841241201,"results":"20","hashOfConfig":"14"},{"size":3064,"mtime":1614011961312,"results":"21","hashOfConfig":"14"},{"size":965,"mtime":1613616711344,"results":"22","hashOfConfig":"14"},{"size":14874,"mtime":1613841655665,"results":"23","hashOfConfig":"14"},{"size":11544,"mtime":1614009140899,"results":"24","hashOfConfig":"14"},{"size":3113,"mtime":1613402357763,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"19zgvs2",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"D:\\Real Loc\\Siramta-Frontend\\src\\index.js",[],["56","57"],"D:\\Real Loc\\Siramta-Frontend\\src\\App.js",[],"D:\\Real Loc\\Siramta-Frontend\\src\\reportWebVitals.js",[],"D:\\Real Loc\\Siramta-Frontend\\src\\routes.js",[],"D:\\Real Loc\\Siramta-Frontend\\src\\Components\\MySqlCluster\\MySqlCluster.js",["58","59"],"import React, { useState, useEffect } from 'react';\r\nimport { Row, Col, Drawer, Collapse } from 'antd';\r\nimport { Button } from 'antd';\r\nimport { Input } from 'antd';\r\nimport { Table } from 'antd';\r\nimport { Link } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\n\r\nimport ApiService from '../../ApiService';\r\nimport Form from 'antd/lib/form/Form';\r\nimport allImage from '../../images/all.png';\r\n\r\nconst initialState = {\r\n  clusterName: '',\r\n  userName: '',\r\n  password: '',\r\n  ram: '',\r\n  ssd: '',\r\n  url: '',\r\n  port: '',\r\n  _id: ''\r\n}\r\n\r\nconst { Panel } = Collapse;\r\n\r\nconst MySqlCluster = () => {\r\n\r\n  const apiService = new ApiService()\r\n  const [isCreateCluster, setIsCreateCluster] = useState(false);\r\n  const [clusterList, setClusterList] = useState([]);\r\n  const [clusterListData, setClusterListData] = useState([]);\r\n  const [formData, setFormData] = useState(initialState);\r\n  const [isLoadingCreateCluster, setIsLoadingCreateCluster] = useState(false);\r\n  const [selectedStorage, setSelectedStorage] = useState([]);\r\n  const [baseUrl, setBaseUrl] = useState('');\r\n  const [portUrl, setPortUrl] = useState('');\r\n\r\n  useEffect(() => {\r\n    getCluster()\r\n  }, [])\r\n\r\n  const getCluster = async () => {\r\n    const data = await apiService.getCluster('MySQL')\r\n    if (data.status === 200) {\r\n      setClusterList(data.data);\r\n      data.data.map((item, index) => {\r\n        setClusterListData((prevState) => [\r\n          ...clusterListData,\r\n          ...prevState,\r\n          {\r\n            key: index,\r\n            sr_no: [index, item._id],\r\n            cluster_name: [data.data[index].cluster_name, item],\r\n            user_name: [data.data[index].user_name, item],\r\n            RAM: data.data[index],\r\n            tags: [item],\r\n          }\r\n        ])\r\n      })\r\n    } else {\r\n    }\r\n  };\r\n\r\n  const onOpenClusterDrawer = () => {\r\n    setFormData(initialState);\r\n    setIsCreateCluster((isCreateCluster) => !isCreateCluster);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setFormData(initialState);\r\n    setIsCreateCluster(false);\r\n  };\r\n\r\n  const onChangeText = (event) => {\r\n    setFormData({ ...formData, [event.target.name]: event.target.value })\r\n  };\r\n\r\n  const onSelectStorage = (record) => {\r\n    setSelectedStorage(record)\r\n  };\r\n\r\n  const onCreateCluster = async () => {\r\n    setIsLoadingCreateCluster(true)\r\n    const payload = {\r\n      cluster_name: formData.clusterName,\r\n      user_name: formData.userName,\r\n      password: formData.password,\r\n      cluster_for: \"MySQL\",\r\n      url: formData.url,\r\n      RAM: selectedStorage.ram\r\n    }\r\n    if (formData._id === '') {\r\n      const data = await apiService.runScriptCluster(payload)\r\n      console.log(\"Script res: 1 \" + JSON.stringify(data))\r\n      if (data.status === 200) {\r\n        toast.success(\"Create cluster successfully!\")\r\n        setTimeout(function () {\r\n          setBaseUrl(data.data.base_url)\r\n          setPortUrl(data.data.port)\r\n          setIsLoadingCreateCluster(false)\r\n        }, 3000)\r\n      } else {\r\n        setIsLoadingCreateCluster(false)\r\n      }\r\n    } else {\r\n      const newPayload = {\r\n        ...payload,\r\n        _id: formData._id\r\n      }\r\n      const data = await apiService.runScriptUpdateCluster(newPayload)\r\n      console.log(\"Script res: 2 \" + JSON.stringify(data))\r\n      if (data.status === 200) {\r\n        toast.success(\"Update cluster successfully!\")\r\n        setTimeout(function () {\r\n          setBaseUrl(data.data.base_url)\r\n          setPortUrl(data.data.port)\r\n          setIsLoadingCreateCluster(false)\r\n        }, 3000)\r\n      } else {\r\n        setIsLoadingCreateCluster(false)\r\n      }\r\n    }\r\n  };\r\n\r\n  const clusterCreate = async () => {\r\n    const payload = {\r\n      cluster_name: formData.clusterName,\r\n      user_name: formData.userName,\r\n      password: formData.password,\r\n      cluster_for: \"MySQL\",\r\n      RAM: selectedStorage.ram,\r\n      hard_drive: selectedStorage.hardDrive,\r\n      base_url: baseUrl,\r\n      port: portUrl,\r\n      url: formData.url\r\n    }\r\n    if (formData._id === '') {\r\n      const data = await apiService.clusterCreate(payload)\r\n      if (data.status === 200) {\r\n        toast.success(\"Create MySQL Cluster Successfully!\")\r\n        setTimeout(function () {\r\n          const clone = [...clusterList];\r\n          clone.push(data.data);\r\n          setClusterList(clone)\r\n          setFormData(initialState);\r\n          setIsCreateCluster(false)\r\n          window.location.reload()\r\n        }, 3000)\r\n      } else {\r\n      }\r\n    } else {\r\n      const newPayload = {\r\n        ...payload,\r\n        _id: formData._id\r\n      }\r\n      const data = await apiService.clusterUpdate(newPayload)\r\n      if (data.status === 200) {\r\n        toast.success(\"Update MySQL Cluster Successfully!\")\r\n        setTimeout(function () {\r\n          const clone = [...clusterList];\r\n          const index = clone.findIndex((x) => x._id === formData._id)\r\n          if (index > -1) {\r\n            clone[index] = newPayload\r\n            setClusterList(clone)\r\n          }\r\n          setFormData(initialState);\r\n          setIsCreateCluster(false)\r\n          window.location.reload()\r\n        }, 3000)\r\n      } else {\r\n      }\r\n    }\r\n  };\r\n\r\n  const onDelete = async (record, i) => {\r\n    if (window.confirm(\"Are you sure you want to delete this record ?\")) {\r\n      const data = await apiService.clusterDelete(record[0]._id)\r\n      if (data.status === 200) {\r\n        toast.error(\"Delete cluster successfully!\")\r\n        setTimeout(function () {\r\n          const clone = [...clusterList];\r\n          const index = clone.findIndex((x) => x._id === record[0]._id)\r\n          if (index > -1) {\r\n            clone.splice(index, 1)\r\n            setClusterList(clone)\r\n            window.location.reload()\r\n          }\r\n        }, 3000);\r\n      }\r\n\r\n    }\r\n  };\r\n\r\n  const onEdit = (record) => {\r\n    setFormData({\r\n      _id: record[0]._id,\r\n      clusterName: record[0].cluster_name,\r\n      userName: record[0].user_name,\r\n      password: record[0].password,\r\n      ram: record[0].RAM,\r\n      ssd: record[0].SSD\r\n    })\r\n    setIsCreateCluster(true)\r\n  };\r\n\r\n  const storageList = [\r\n    { key: \"1\", ram: \"1 GB\", hardDrive: \"12 GB\" },\r\n    { key: \"2\", ram: \"512 MB\", hardDrive: \"8 GB\" },\r\n  ]\r\n\r\n  const clusterListColumns = [\r\n    {\r\n      title: 'Sr no.',\r\n      dataIndex: 'sr_no',\r\n      key: 'sr_no',\r\n      render: (index) => <Link to={'/MySQL-detail/' + index[1]}>{index[0] + 1}</Link>,\r\n    },\r\n    {\r\n      title: 'Cluster Name',\r\n      dataIndex: 'cluster_name',\r\n      key: '2',\r\n      render: (index) => <Link to={'/MySQL-detail/' + index[1]._id}>{index[0]}</Link>,\r\n    },\r\n    {\r\n      title: 'User Name',\r\n      dataIndex: 'user_name',\r\n      key: 'user_name',\r\n      render: (index) => <Link to={'/MySQL-detail/' + index[1]._id}>{index[0]}</Link>,\r\n    },\r\n    {\r\n      title: 'RAM',\r\n      dataIndex: 'RAM',\r\n      key: 'RAM',\r\n      render: (index) => <Link to={'/MySQL-detail/' + index._id}>{index.RAM}</Link>,\r\n    },\r\n    {\r\n      title: 'Action',\r\n      key: 'tags',\r\n      dataIndex: 'tags',\r\n      width: '23%',\r\n      render: tags => (\r\n        <>\r\n          <Button type=\"primary\" onClick={() => onEdit(tags)} style={{ marginRight: 5 }}>Edit </Button>\r\n          <Button type=\"primary\" danger onClick={() => onDelete(tags)}>Delete</Button>\r\n        </>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <Row style={{ marginTop: 20 }}>\r\n        <Col span={4}></Col>\r\n        <Col span={14}>\r\n          <h1>MySQL clusters</h1>\r\n        </Col>\r\n        <Col>\r\n          <Button type=\"primary\" onClick={onOpenClusterDrawer}>\r\n            <PlusOutlined /> Create Cluster\r\n        </Button>\r\n        </Col>\r\n      </Row>\r\n\r\n      <Row style={{ marginTop: 20 }}>\r\n        <Col span={3}></Col>\r\n        <Col span={18}>\r\n          <Table columns={clusterListColumns} dataSource={clusterListData} />\r\n        </Col>\r\n      </Row>\r\n\r\n      {isCreateCluster &&\r\n        <Drawer\r\n          title={formData._id === '' ? \"Create Cluster\" : \"Update Cluster\"}\r\n          width={560}\r\n          onClose={handleCancel}\r\n          visible={isCreateCluster}\r\n          bodyStyle={{ paddingBottom: 80 }}\r\n          footer={\r\n            <div\r\n              style={{\r\n                textAlign: 'right',\r\n              }}\r\n            >\r\n              <Button style={{ marginRight: 8 }} onClick={handleCancel}> Cancel </Button>\r\n              <Button type=\"primary\" onClick={clusterCreate}> Submit </Button>\r\n            </div>\r\n          }\r\n        >\r\n          <Collapse>\r\n            <Panel header=\"Cloud Provider & Region\" key=\"1\">\r\n              <img src={allImage} alt=\"AWS logo\" />\r\n            </Panel>\r\n            <Panel header=\"Select RAM and SSD\" key=\"2\">\r\n              <div class=\"instance-table-header\">\r\n                <div class=\"instance-table-header-cell\">Select</div>\r\n                <div class=\"instance-table-header-cell\">RAM</div>\r\n                <div class=\"instance-table-header-cell\">Hard Drive</div>\r\n              </div>\r\n\r\n              {storageList.map((item) => (\r\n                <div>\r\n                  <div class=\"instance-table-info-cell instance-table-info-cell-is-name instance-table-info-cell-is-inner-shadow\">\r\n                    <div>\r\n                      <span>\r\n                        <input type=\"radio\" name=\"gender\" onClick={() => onSelectStorage(item)} />\r\n                        <i class=\"fa instance-table-hardware-circle instance-table-hardware-circle-is-superscript\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"instance-table-info-cell instance-table-info-cell-is-inner-shadow\">{item.ram}</div>\r\n                  <div class=\"instance-table-info-cell instance-table-info-cell-is-inner-shadow\">{item.hardDrive}</div>\r\n                </div>\r\n              ))}\r\n\r\n            </Panel>\r\n            <Panel header=\"Cluster Name\" key=\"3\">\r\n              <Form layout=\"vertical\" hideRequiredMark>\r\n                <label>Cluster Name: </label>\r\n                <Input placeholder=\"Cluster Name\" name='clusterName' value={formData.clusterName} onChange={onChangeText} id='clusterName' />\r\n                <label>User Name: </label>\r\n                <Input placeholder=\"User Name\" name='userName' value={formData.userName} onChange={onChangeText} id='userName' />\r\n                <label>Password: </label>\r\n                <Input.Password placeholder=\"Password\" name='password' value={formData.password} onChange={onChangeText} id='password' />\r\n                <label>Url: </label>\r\n                <Input placeholder=\"Url\" name='url' value={formData.url} onChange={onChangeText} id='url' />\r\n\r\n                <Row style={{ marginTop: 15 }}>\r\n                  <Col span={6}></Col>\r\n                  <Col span={6}></Col>\r\n                  <Col span={6}></Col>\r\n                  <Col span={6}>\r\n                    {isLoadingCreateCluster ? <Button type=\"primary\" loading>Loading</Button>\r\n                      : <Button type=\"primary\" onClick={onCreateCluster}>{formData._id === '' ? \"Create Cluster\" : \"Update Cluster\"}</Button>\r\n                    }</Col>\r\n                </Row>\r\n              </Form>\r\n            </Panel>\r\n          </Collapse>\r\n        </Drawer>\r\n      }\r\n\r\n    </>\r\n  );\r\n};\r\nexport default MySqlCluster;","D:\\Real Loc\\Siramta-Frontend\\src\\Components\\MySqlCluster\\MySqlClusterDetail.js",["60"],"import React, { useState, useEffect } from 'react';\r\nimport { Button, Col, Row } from 'antd';\r\nimport Modal from 'antd/lib/modal/Modal';\r\n\r\nimport ApiService from '../../ApiService';\r\n\r\nconst MySQLClusterDetail = (props) => {\r\n\r\n    const [clusterData, setClusterData] = useState({})\r\n    const [isClusterModal, setIsClusterModal] = useState(false);\r\n\r\n    let apiService = new ApiService()\r\n    let id = props.match.params.id;\r\n\r\n    useEffect(() => {\r\n        getClusterDetail()\r\n    }, [])\r\n\r\n    const getClusterDetail = async () => {\r\n        const data = await apiService.getClusterById(id);\r\n        if (data.status === 200) {\r\n            console.log(\"Data:- \" + JSON.stringify(data.data))\r\n            setClusterData(data.data)\r\n        }\r\n    }\r\n\r\n    const onModalOpen = () => {\r\n        setIsClusterModal(!isClusterModal)\r\n    };\r\n\r\n    const onModalClose = () => {\r\n        setIsClusterModal(!isClusterModal)\r\n    };\r\n\r\n    const onClickClusterDetail = () => {\r\n        setIsClusterModal(true)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Row style={{ marginTop: 20 }}>\r\n                <Col span={9}></Col>\r\n                <Col style={{ marginLeft: 8 }}>\r\n                    <h1>MySQL Cluster Detail</h1>\r\n                </Col>\r\n            </Row>\r\n            <Row style={{ marginTop: 20 }}>\r\n                <Col span={6}></Col>\r\n                <Col md={12}>\r\n                    <Button type='primary' block onClick={onClickClusterDetail}>Cluster Detail</Button>\r\n                </Col>\r\n            </Row>\r\n            {  isClusterModal &&\r\n                <Modal title=\"Cluster Detail\" visible={isClusterModal} onOk={onModalOpen} onCancel={onModalClose}>\r\n                    <table>\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>Cluster Name: </th>\r\n                                <td style={{ paddingLeft: 10 }}>{clusterData.cluster_name}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th>User Name: </th>\r\n                                <td style={{ paddingLeft: 10 }}>{clusterData.user_name}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th>RAM: </th>\r\n                                <td style={{ paddingLeft: 10 }}>{clusterData.RAM}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th>Hard Drive: </th>\r\n                                <td style={{ paddingLeft: 10 }}>{clusterData.hard_drive}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th>Base Url: </th>\r\n                                <td style={{ paddingLeft: 10 }}>{clusterData.base_url}</td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </Modal>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MySQLClusterDetail;","D:\\Real Loc\\Siramta-Frontend\\src\\Components\\PostgreSqlCluster\\PostgreSqlClusterDetail.js",["61"],"import React, { useState, useEffect } from 'react';\r\nimport { Button, Col, Row } from 'antd';\r\nimport Modal from 'antd/lib/modal/Modal';\r\n\r\nimport ApiService from '../../ApiService';\r\n\r\nconst PostgreSqlClusterDetail = (props) => {\r\n\r\n    // const [isLoading, setIsLoading] = useState(false)\r\n    const [clusterData, setClusterData] = useState({})\r\n    const [isClusterModal, setIsClusterModal] = useState(false);\r\n\r\n    let apiService = new ApiService()\r\n    let id = props.match.params.id;\r\n\r\n    useEffect(() => {\r\n        getClusterDetail()\r\n    }, [])\r\n\r\n    const getClusterDetail = async () => {\r\n        // setIsLoading(true)\r\n        const data = await apiService.getClusterById(id);\r\n        if (data.status === 200) {\r\n            console.log(\"Data:- \" + JSON.stringify(data.data))\r\n            setClusterData(data.data)\r\n            // setIsLoading(false)\r\n        }\r\n    }\r\n\r\n    const onModalOpen = () => {\r\n        setIsClusterModal(!isClusterModal)\r\n    };\r\n\r\n    const onModalClose = () => {\r\n        setIsClusterModal(!isClusterModal)\r\n    };\r\n\r\n    const onClickClusterDetail = () => {\r\n        setIsClusterModal(true)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Row style={{ marginTop: 20 }}>\r\n                <Col span={9}></Col>\r\n                <Col style={{ marginLeft: 8 }}>\r\n                    <h1>PostgreSQL Cluster Detail</h1>\r\n                </Col>\r\n            </Row>\r\n            <Row style={{ marginTop: 20 }}>\r\n                <Col span={6}></Col>\r\n                <Col md={12}>\r\n                    <Button type='primary' block onClick={onClickClusterDetail}>Cluster Detail</Button>\r\n                </Col>\r\n            </Row>\r\n            {  isClusterModal &&\r\n                <Modal title=\"Cluster Detail\" visible={isClusterModal} onOk={onModalOpen} onCancel={onModalClose}>\r\n                    <table>\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>Cluster Name: </th>\r\n                                <td style={{ paddingLeft: 10 }}>{clusterData.cluster_name}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th>User Name: </th>\r\n                                <td style={{ paddingLeft: 10 }}>{clusterData.user_name}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th>RAM: </th>\r\n                                <td style={{ paddingLeft: 10 }}>{clusterData.RAM}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th>Hard Drive: </th>\r\n                                <td style={{ paddingLeft: 10 }}>{clusterData.hard_drive}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <th>Base Url: </th>\r\n                                <td style={{ paddingLeft: 10 }}>{clusterData.base_url}</td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </Modal>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default PostgreSqlClusterDetail;","D:\\Real Loc\\Siramta-Frontend\\src\\Components\\MongodbCluster\\MongodbClusterDetail.js",["62","63"],"D:\\Real Loc\\Siramta-Frontend\\src\\Components\\Home\\Home.js",[],"D:\\Real Loc\\Siramta-Frontend\\src\\Components\\PostgreSqlCluster\\PostgreSqlCluster.js",["64","65"],"import React, { useState, useEffect } from 'react';\r\nimport { Row, Col, Drawer, Collapse } from 'antd';\r\nimport { Button } from 'antd';\r\nimport { Input } from 'antd';\r\nimport { Table } from 'antd';\r\nimport { Link } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\n\r\nimport ApiService from '../../ApiService';\r\nimport Form from 'antd/lib/form/Form';\r\nimport allImage from '../../images/all.png';\r\n\r\nconst initialState = {\r\n  clusterName: '',\r\n  userName: '',\r\n  password: '',\r\n  ram: '',\r\n  ssd: '',\r\n  url: '',\r\n  port: '',\r\n  _id: ''\r\n}\r\n\r\nconst { Panel } = Collapse;\r\n\r\nconst PostgreSqlCluster = () => {\r\n\r\n  const apiService = new ApiService()\r\n  const [isCreateCluster, setIsCreateCluster] = useState(false);\r\n  // const [isLoading, setIsLoading] = useState(false);\r\n  // const [isSaving, setIsSaving] = useState(false);\r\n  const [clusterList, setClusterList] = useState([]);\r\n  const [clusterListData, setClusterListData] = useState([]);\r\n  const [formData, setFormData] = useState(initialState);\r\n  // const [isClusterModal, setIsClusterModal] = useState(false);\r\n  const [isLoadingCreateCluster, setIsLoadingCreateCluster] = useState(false);\r\n  const [selectedStorage, setSelectedStorage] = useState([]);\r\n  const [baseUrl, setBaseUrl] = useState('');\r\n  const [portUrl, setPortUrl] = useState('');\r\n\r\n  useEffect(() => {\r\n    getCluster()\r\n  }, [])\r\n\r\n\r\n  const getCluster = async () => {\r\n    // setIsLoading(true)\r\n    const data = await apiService.getCluster('PostgreSQL')\r\n    if (data.status === 200) {\r\n      setClusterList(data.data);\r\n      console.log(\"data.data\", data.data);\r\n      data.data.map((item, index, prevState) => {\r\n        setClusterListData((prevState) => [\r\n          ...clusterListData,\r\n          ...prevState,\r\n          {\r\n            key: index,\r\n            sr_no: [index, item._id],\r\n            cluster_name: [data.data[index].cluster_name, item],\r\n            user_name: [data.data[index].user_name, item],\r\n            RAM: data.data[index],\r\n            tags: [item],\r\n          }\r\n        ])\r\n      }\r\n      )\r\n      // setClusterListData(data.data)\r\n      // setIsLoading(false);\r\n    } else {\r\n      // setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  const onOpenClusterDrawer = () => {\r\n    setFormData(initialState);\r\n    setIsCreateCluster((isCreateCluster) => !isCreateCluster);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setFormData(initialState);\r\n    setIsCreateCluster(false);\r\n  };\r\n\r\n  // const handleRamModalCancel = () => {\r\n  //   setFormData(initialState);\r\n  //   setIsClusterModal(false);\r\n  // };\r\n\r\n  const onChangeText = (event) => {\r\n    setFormData({ ...formData, [event.target.name]: event.target.value })\r\n  }\r\n\r\n  // const onModalOpen = () => {\r\n  //   setIsClusterModal(!isClusterModal)\r\n  // };\r\n\r\n  const onSelectStorage = (record) => {\r\n    setSelectedStorage(record)\r\n  };\r\n\r\n  const onCreateCluster = async () => {\r\n    setIsLoadingCreateCluster(true)\r\n    const payload = {\r\n      cluster_name: formData.clusterName,\r\n      user_name: formData.userName,\r\n      password: formData.password,\r\n      cluster_for: \"PostgreSQL\",\r\n      url: formData.url,\r\n      RAM: selectedStorage.ram\r\n    }\r\n    if (formData._id === '') {\r\n      const data = await apiService.runScriptCluster(payload)\r\n      if (data.status === 200) {\r\n        toast.success(\"Create cluster successfully!\")\r\n        setTimeout(function () {\r\n          setBaseUrl(data.data.base_url)\r\n          setPortUrl(data.data.port)\r\n          setIsLoadingCreateCluster(false)\r\n        }, 3000)\r\n      } else {\r\n        setIsLoadingCreateCluster(false)\r\n      }\r\n    } else {\r\n      const newPayload = {\r\n        ...payload,\r\n        _id: formData._id\r\n      }\r\n      const data = await apiService.runScriptUpdateCluster(newPayload)\r\n      if (data.status === 200) {\r\n        toast.success(\"Update cluster successfully!\")\r\n        setTimeout(function () {\r\n          setBaseUrl(data.data.base_url)\r\n          setPortUrl(data.data.port)\r\n          setIsLoadingCreateCluster(false)\r\n        }, 3000)\r\n      } else {\r\n        setIsLoadingCreateCluster(false)\r\n      }\r\n    }\r\n  };\r\n\r\n  const clusterCreate = async () => {\r\n    // setIsClusterModal(false);\r\n    // setIsSaving(true)\r\n    const payload = {\r\n      cluster_name: formData.clusterName,\r\n      user_name: formData.userName,\r\n      password: formData.password,\r\n      cluster_for: \"PostgreSQL\",\r\n      RAM: selectedStorage.ram,\r\n      hard_drive: selectedStorage.hardDrive,\r\n      base_url: baseUrl,\r\n      port: portUrl,\r\n      url: formData.url\r\n    }\r\n    if (formData._id === '') {\r\n      const data = await apiService.clusterCreate(payload)\r\n      if (data.status === 200) {\r\n        toast.success(\"Create PostgreSQL Cluster Successfully!\")\r\n        setTimeout(function () {\r\n          const clone = [...clusterList];\r\n          clone.push(data.data);\r\n          setClusterList(clone)\r\n          setFormData(initialState);\r\n          setIsCreateCluster(false)\r\n          // setIsSaving(false)\r\n          window.location.reload()\r\n        }, 3000)\r\n      } else {\r\n        // setIsSaving(false)\r\n      }\r\n    } else {\r\n      const newPayload = {\r\n        ...payload,\r\n        _id: formData._id\r\n      }\r\n      const data = await apiService.clusterUpdate(newPayload)\r\n      if (data.status === 200) {\r\n        toast.success(\"Update PostgreSQL Cluster Successfully!\")\r\n        setTimeout(function () {\r\n          const clone = [...clusterList];\r\n          const index = clone.findIndex((x) => x._id === formData._id)\r\n          if (index > -1) {\r\n            clone[index] = newPayload\r\n            setClusterList(clone)\r\n          }\r\n          setFormData(initialState);\r\n          setIsCreateCluster(false)\r\n          // setIsSaving(false)\r\n          window.location.reload()\r\n        }, 3000)\r\n      } else {\r\n        // setIsSaving(false)\r\n      }\r\n    }\r\n  };\r\n\r\n  const onDelete = async (record, i) => {\r\n    if (window.confirm(\"Are you sure you want to delete this record ?\")) {\r\n      const data = await apiService.clusterDelete(record[0]._id)\r\n      if (data.status === 200) {\r\n        toast.error(\"Delete cluster successfully!\")\r\n        setTimeout(function () {\r\n          const clone = [...clusterList];\r\n          const index = clone.findIndex((x) => x._id === record[0]._id)\r\n          if (index > -1) {\r\n            clone.splice(index, 1)\r\n            setClusterList(clone)\r\n            window.location.reload()\r\n          }\r\n        }, 3000);\r\n      }\r\n    }\r\n  };\r\n\r\n  const onEdit = (record) => {\r\n    setFormData({\r\n      _id: record[0]._id,\r\n      clusterName: record[0].cluster_name,\r\n      userName: record[0].user_name,\r\n      password: record[0].password,\r\n      ram: record[0].RAM,\r\n      ssd: record[0].SSD\r\n    })\r\n    setIsCreateCluster(true)\r\n  };\r\n\r\n  const storageList = [\r\n    { key: \"1\", ram: \"1 GB\", hardDrive: \"12 GB\" },\r\n    { key: \"2\", ram: \"512 MB\", hardDrive: \"8 GB\" },\r\n  ]\r\n\r\n  // const columns = [\r\n  //   {\r\n  //     title: 'RAM',\r\n  //     dataIndex: 'ram',\r\n  //     key: 'ram',\r\n  //   },\r\n  //   {\r\n  //     title: 'Hard Drive',\r\n  //     dataIndex: 'hardDrive',\r\n  //     key: 'hardDrive',\r\n  //   },\r\n  // ];\r\n\r\n  // rowSelection objects indicates the need for row selection\r\n  // const rowSelection = {\r\n  //   onChange: (selectedRowKeys, selectedRows) => {\r\n  //     setSelectedStorage(selectedRows)\r\n  //     console.log(`selectedRowKeys: ${selectedRowKeys}`, 'selectedRows: ', selectedRows);\r\n  //   },\r\n  //   onSelect: (record, selected, selectedRows) => {\r\n  //     console.log(record, selected, selectedRows);\r\n  //   },\r\n  //   onSelectAll: (selected, selectedRows, changeRows) => {\r\n  //     console.log(selected, selectedRows, changeRows);\r\n  //   },\r\n  // };\r\n\r\n  const clusterListColumns = [\r\n    {\r\n      title: 'Sr no.',\r\n      dataIndex: 'sr_no',\r\n      key: 'sr_no',\r\n      render: (index) => <Link to={'/PostgreSQL-detail/' + index[1]}>{index[0] + 1}</Link>,\r\n    },\r\n    {\r\n      title: 'Cluster Name',\r\n      dataIndex: 'cluster_name',\r\n      key: '2',\r\n      render: (index) => <Link to={'/PostgreSQL-detail/' + index[1]._id}>{index[0]}</Link>,\r\n    },\r\n    {\r\n      title: 'User Name',\r\n      dataIndex: 'user_name',\r\n      key: 'user_name',\r\n      render: (index) => <Link to={'/PostgreSQL-detail/' + index[1]._id}>{index[0]}</Link>,\r\n    },\r\n    {\r\n      title: 'RAM',\r\n      dataIndex: 'RAM',\r\n      key: 'RAM',\r\n      render: (index) => <Link to={'/PostgreSQL-detail/' + index._id}>{index.RAM}</Link>,\r\n    },\r\n    {\r\n      title: 'Action',\r\n      key: 'tags',\r\n      dataIndex: 'tags',\r\n      width: '23%',\r\n      render: tags => (\r\n        <>\r\n          <Button type=\"primary\" onClick={() => onEdit(tags)} style={{ marginRight: 5 }}>Edit </Button>\r\n          <Button type=\"primary\" danger onClick={() => onDelete(tags)}>Delete</Button>\r\n        </>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <Row style={{ marginTop: 20 }}>\r\n        <Col span={4}></Col>\r\n        <Col span={14}>\r\n          <h1>PostgreSQL clusters</h1>\r\n        </Col>\r\n        <Col>\r\n          <Button type=\"primary\" onClick={onOpenClusterDrawer}>\r\n            <PlusOutlined /> Create Cluster\r\n        </Button>\r\n          {/* <Button type=\"primary\" onClick={onOpenClusterDrawer}> Create Cluster</Button> */}\r\n        </Col>\r\n      </Row>\r\n\r\n      <Row style={{ marginTop: 20 }}>\r\n        <Col span={3}></Col>\r\n        <Col span={18}>\r\n          <Table columns={clusterListColumns} dataSource={clusterListData} />\r\n        </Col>\r\n      </Row>\r\n\r\n      {isCreateCluster &&\r\n        <Drawer\r\n          title={formData._id === '' ? \"Create Cluster\" : \"Update Cluster\"}\r\n          width={560}\r\n          onClose={handleCancel}\r\n          visible={isCreateCluster}\r\n          bodyStyle={{ paddingBottom: 80 }}\r\n          footer={\r\n            <div\r\n              style={{\r\n                textAlign: 'right',\r\n              }}\r\n            >\r\n              <Button style={{ marginRight: 8 }} onClick={handleCancel}> Cancel </Button>\r\n              <Button type=\"primary\" onClick={clusterCreate}> Submit </Button>\r\n            </div>\r\n          }\r\n        >\r\n          <Collapse>\r\n            <Panel header=\"Cloud Provider & Region\" key=\"1\">\r\n              <img src={allImage} alt=\"AWS logo\" />\r\n            </Panel>\r\n            <Panel header=\"Select RAM and SSD\" key=\"2\">\r\n              <div class=\"instance-table-header\">\r\n                <div class=\"instance-table-header-cell\">Select</div>\r\n                <div class=\"instance-table-header-cell\">RAM</div>\r\n                <div class=\"instance-table-header-cell\">Hard Drive</div>\r\n              </div>\r\n\r\n              {storageList.map((item) => (\r\n                <div>\r\n                  <div class=\"instance-table-info-cell instance-table-info-cell-is-name instance-table-info-cell-is-inner-shadow\">\r\n                    <div>\r\n                      <span>\r\n                        <input type=\"radio\" name=\"gender\" onClick={() => onSelectStorage(item)} />\r\n                        <i class=\"fa instance-table-hardware-circle instance-table-hardware-circle-is-superscript\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"instance-table-info-cell instance-table-info-cell-is-inner-shadow\">{item.ram}</div>\r\n                  <div class=\"instance-table-info-cell instance-table-info-cell-is-inner-shadow\">{item.hardDrive}</div>\r\n                </div>\r\n              ))}\r\n\r\n            </Panel>\r\n            <Panel header=\"Cluster Name\" key=\"3\">\r\n              <Form layout=\"vertical\" hideRequiredMark>\r\n                <label>Cluster Name: </label>\r\n                <Input placeholder=\"Cluster Name\" name='clusterName' value={formData.clusterName} onChange={onChangeText} id='clusterName' />\r\n                <label>User Name: </label>\r\n                <Input placeholder=\"User Name\" name='userName' value={formData.userName} onChange={onChangeText} id='userName' />\r\n                <label>Password: </label>\r\n                <Input.Password placeholder=\"Password\" name='password' value={formData.password} onChange={onChangeText} id='password' />\r\n                <label>Url: </label>\r\n                <Input placeholder=\"Url\" name='url' value={formData.url} onChange={onChangeText} id='url' />\r\n\r\n                <Row style={{ marginTop: 15 }}>\r\n                  {/* <Col span={6}><Button type=\"primary\" onClick={onModalOpen}>Select RAM & SSD</Button></Col> */}\r\n                  <Col span={6}></Col>\r\n                  <Col span={6}></Col>\r\n                  <Col span={6}></Col>\r\n                  <Col span={6}>\r\n                    {isLoadingCreateCluster ? <Button type=\"primary\" loading>Loading</Button>\r\n                      : <Button type=\"primary\" onClick={onCreateCluster}>{formData._id === '' ? \"Create Cluster\" : \"Update Cluster\"}</Button>\r\n                    }</Col>\r\n                </Row>\r\n              </Form>\r\n            </Panel>\r\n          </Collapse>\r\n        </Drawer>\r\n      }\r\n\r\n      {/* {\r\n        isCreateCluster &&\r\n        <Modal title={formData._id === '' ? \"Create Cluster\" : \"Update Cluster\"} visible={isCreateCluster} onOk={clusterCreate} onCancel={handleCancel}>\r\n          <label>Cluster Name: </label>\r\n          <Input placeholder=\"Cluster Name\" name='clusterName' value={formData.clusterName} onChange={onChangeText} id='clusterName' />\r\n          <label>User Name: </label>\r\n          <Input placeholder=\"User Name\" name='userName' value={formData.userName} onChange={onChangeText} id='userName' />\r\n          <label>Password: </label>\r\n          <Input.Password placeholder=\"Password\" name='password' value={formData.password} onChange={onChangeText} id='password' />\r\n          <label>Url: </label>\r\n          <Input placeholder=\"Url\" name='url' value={formData.url} onChange={onChangeText} id='url' />\r\n\r\n          <Row style={{ marginTop: 15 }}>\r\n            <Col span={6}><Button type=\"primary\" onClick={onModalOpen}>Select RAM & SSD</Button></Col>\r\n            <Col span={6}></Col>\r\n            <Col span={6}></Col>\r\n            <Col span={6}>\r\n              {isLoadingCreateCluster ? <Button type=\"primary\" loading>Loading</Button>\r\n                : <Button type=\"primary\" onClick={onCreateCluster}>{formData._id === '' ? \"Create Cluster\" : \"Update Cluster\"}</Button>\r\n              }</Col>\r\n          </Row>\r\n        </Modal>\r\n      } */}\r\n\r\n      {/* {\r\n        isClusterModal &&\r\n        <Modal title=\"Select RAM & SSD\" visible={isClusterModal} onOk={onModalOpen} onCancel={handleRamModalCancel}>\r\n          <Table\r\n            columns={columns}\r\n            rowSelection={{ ...rowSelection }}\r\n            dataSource={storageList}\r\n            onChange={(item) => onSelectStorage(item)}\r\n          />\r\n        </Modal>\r\n      } */}\r\n    </>\r\n  );\r\n};\r\nexport default PostgreSqlCluster;","D:\\Real Loc\\Siramta-Frontend\\src\\Components\\MongodbCluster\\MongodbCluster.js",["66","67"],"import React, { useState, useEffect } from 'react';\r\nimport { Row, Col, Drawer, Collapse } from 'antd';\r\nimport { Button } from 'antd';\r\nimport { Input } from 'antd';\r\nimport { Table, Switch } from 'antd';\r\nimport { Link } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\n\r\nimport ApiService from '../../ApiService';\r\nimport Form from 'antd/lib/form/Form';\r\nimport allImage from '../../images/all.png';\r\n\r\nconst initialState = {\r\n  clusterName: '',\r\n  userName: '',\r\n  password: '',\r\n  ram: '',\r\n  ssd: '',\r\n  url: '',\r\n  port: '',\r\n  _id: ''\r\n}\r\n\r\nconst { Panel } = Collapse;\r\n\r\nconst MongodbCluster = () => {\r\n\r\n  const apiService = new ApiService()\r\n  const [isCreateCluster, setIsCreateCluster] = useState(false);\r\n  const [clusterList, setClusterList] = useState([]);\r\n  const [clusterListData, setClusterListData] = useState([]);\r\n  const [formData, setFormData] = useState(initialState);\r\n  const [isLoadingCreateCluster, setIsLoadingCreateCluster] = useState(false);\r\n  const [selectedStorage, setSelectedStorage] = useState([]);\r\n  const [baseUrl, setBaseUrl] = useState('');\r\n  const [portUrl, setPortUrl] = useState('');\r\n\r\n  useEffect(() => {\r\n    getCluster()\r\n  }, [])\r\n\r\n  const getCluster = async () => {\r\n    const data = await apiService.getCluster('MongoDB')\r\n    if (data.status === 200) {\r\n      setClusterList(data.data);\r\n      data.data.map((item, index) => {\r\n        setClusterListData((prevState) => [\r\n          ...clusterListData,\r\n          ...prevState,\r\n          {\r\n            key: index,\r\n            sr_no: [index, item._id],\r\n            cluster_name: [data.data[index].cluster_name, item],\r\n            user_name: [data.data[index].user_name, item],\r\n            RAM: data.data[index],\r\n            tags: [item],\r\n          }\r\n        ])\r\n      })\r\n    } else {\r\n    }\r\n  }\r\n\r\n  const onOpenClusterDrawer = () => {\r\n    setFormData(initialState);\r\n    setIsCreateCluster((isCreateCluster) => !isCreateCluster);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setFormData(initialState);\r\n    setIsCreateCluster(false);\r\n  };\r\n\r\n  const onChangeText = (event) => {\r\n    setFormData({ ...formData, [event.target.name]: event.target.value })\r\n  };\r\n\r\n  const onSelectStorage = (record) => {\r\n    setSelectedStorage(record)\r\n  };\r\n\r\n  const onCreateCluster = async () => {\r\n    setIsLoadingCreateCluster(true)\r\n    const payload = {\r\n      cluster_name: formData.clusterName,\r\n      user_name: formData.userName,\r\n      password: formData.password,\r\n      cluster_for: \"MongoDB\",\r\n      url: formData.url,\r\n      RAM: selectedStorage.ram\r\n    }\r\n    if (formData._id === '') {\r\n      const data = await apiService.runScriptCluster(payload)\r\n      console.log(\"Script res: 1 \" + JSON.stringify(data))\r\n      if (data.status === 200) {\r\n        toast.success(\"Create cluster successfully!\")\r\n        setTimeout(function () {\r\n          setBaseUrl(data.data.base_url)\r\n          setPortUrl(data.data.port)\r\n          setIsLoadingCreateCluster(false)\r\n        }, 3000)\r\n      } else {\r\n        setIsLoadingCreateCluster(false)\r\n      }\r\n    } else {\r\n      const newPayload = {\r\n        ...payload,\r\n        _id: formData._id\r\n      }\r\n      const data = await apiService.runScriptUpdateCluster(newPayload)\r\n      console.log(\"Script res: 2 \" + JSON.stringify(data))\r\n      if (data.status === 200) {\r\n        toast.success(\"Update cluster successfully!\")\r\n        setTimeout(function () {\r\n          setBaseUrl(data.data.base_url)\r\n          setPortUrl(data.data.port)\r\n          setIsLoadingCreateCluster(false)\r\n        }, 3000)\r\n      } else {\r\n        setIsLoadingCreateCluster(false)\r\n      }\r\n    }\r\n  };\r\n\r\n  const clusterCreate = async () => {\r\n    const payload = {\r\n      cluster_name: formData.clusterName,\r\n      user_name: formData.userName,\r\n      password: formData.password,\r\n      cluster_for: \"MongoDB\",\r\n      RAM: selectedStorage.ram,\r\n      hard_drive: selectedStorage.hardDrive,\r\n      base_url: baseUrl,\r\n      port: portUrl,\r\n      url: formData.url\r\n    }\r\n    console.log(\"Data: \" + JSON.stringify(payload))\r\n    if (formData._id === '') {\r\n      const data = await apiService.clusterCreate(payload)\r\n      if (data.status === 200) {\r\n        toast.success(\"Create MongoDB Cluster Successfully!\")\r\n        setTimeout(function () {\r\n          const clone = [...clusterList];\r\n          clone.push(data.data);\r\n          setClusterList(clone)\r\n          setFormData(initialState);\r\n          setIsCreateCluster(false)\r\n          window.location.reload()\r\n        }, 3000)\r\n      } else {\r\n      }\r\n    } else {\r\n      const newPayload = {\r\n        ...payload,\r\n        _id: formData._id\r\n      }\r\n      const data = await apiService.clusterUpdate(newPayload)\r\n      if (data.status === 200) {\r\n        toast.success(\"Update MongoDb Cluster Successfully!\")\r\n        setTimeout(function () {\r\n          const clone = [...clusterList];\r\n          const index = clone.findIndex((x) => x._id === formData._id)\r\n          if (index > -1) {\r\n            clone[index] = newPayload\r\n            setClusterList(clone)\r\n          }\r\n          setFormData(initialState);\r\n          setIsCreateCluster(false)\r\n          window.location.reload()\r\n        }, 3000)\r\n      } else {\r\n      }\r\n    }\r\n  };\r\n\r\n  const onDelete = async (record, i) => {\r\n    if (window.confirm(\"Are you sure you want to delete this record ?\")) {\r\n      const data = await apiService.clusterDelete(record[0]._id)\r\n      if (data.status === 200) {\r\n        toast.error(\"Delete cluster successfully!\")\r\n        setTimeout(function () {\r\n          const clone = [...clusterList];\r\n          const index = clone.findIndex((x) => x._id === record[0]._id)\r\n          if (index > -1) {\r\n            clone.splice(index, 1)\r\n            setClusterList(clone)\r\n            window.location.reload()\r\n          }\r\n        }, 3000);\r\n      }\r\n    }\r\n  };\r\n\r\n  const onEdit = (record) => {\r\n    setFormData({\r\n      _id: record[0]._id,\r\n      clusterName: record[0].cluster_name,\r\n      userName: record[0].user_name,\r\n      password: record[0].password,\r\n      ram: record[0].RAM,\r\n      ssd: record[0].SSD\r\n    })\r\n    setIsCreateCluster(true)\r\n  };\r\n\r\n  const storageList = [\r\n    { key: \"1\", ram: \"1 GB\", hardDrive: \"12 GB\" },\r\n    { key: \"2\", ram: \"512 MB\", hardDrive: \"8 GB\" },\r\n  ]\r\n\r\n  const clusterListColumns = [\r\n    {\r\n      title: 'Sr no.',\r\n      dataIndex: 'sr_no',\r\n      key: 'sr_no',\r\n      render: (index) => <Link to={'/cluster-detail/' + index[1]}>{index[0] + 1}</Link>,\r\n    },\r\n    {\r\n      title: 'Cluster Name',\r\n      dataIndex: 'cluster_name',\r\n      key: '2',\r\n      render: (index) => <Link to={'/cluster-detail/' + index[1]._id}>{index[0]}</Link>,\r\n    },\r\n    {\r\n      title: 'User Name',\r\n      dataIndex: 'user_name',\r\n      key: 'user_name',\r\n      render: (index) => <Link to={'/cluster-detail/' + index[1]._id}>{index[0]}</Link>,\r\n    },\r\n    {\r\n      title: 'RAM',\r\n      dataIndex: 'RAM',\r\n      key: 'RAM',\r\n      render: (index) => <Link to={'/cluster-detail/' + index._id}>{index.RAM}</Link>,\r\n    },\r\n    {\r\n      title: 'Action',\r\n      key: 'tags',\r\n      dataIndex: 'tags',\r\n      width: '23%',\r\n      render: tags => (\r\n        <>\r\n          <Button type=\"primary\" onClick={() => onEdit(tags)} style={{ marginRight: 5 }}>Edit </Button>\r\n          <Button type=\"primary\" danger onClick={() => onDelete(tags)}>Delete</Button>\r\n        </>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <Row style={{ marginTop: 20 }}>\r\n        <Col span={4}></Col>\r\n        <Col span={14}>\r\n          <h1>MongoDB clusters</h1>\r\n        </Col>\r\n        <Col>\r\n          <Button type=\"primary\" onClick={onOpenClusterDrawer}>\r\n            <PlusOutlined /> Create Cluster\r\n        </Button>\r\n        </Col>\r\n      </Row>\r\n\r\n      <Row style={{ marginTop: 20 }}>\r\n        <Col span={3}></Col>\r\n        <Col span={18}>\r\n          <Table columns={clusterListColumns} dataSource={clusterListData} />\r\n        </Col>\r\n      </Row>\r\n\r\n      {isCreateCluster &&\r\n        <Drawer\r\n          title={formData._id === '' ? \"Create Cluster\" : \"Update Cluster\"}\r\n          width={560}\r\n          onClose={handleCancel}\r\n          visible={isCreateCluster}\r\n          bodyStyle={{ paddingBottom: 80 }}\r\n          footer={\r\n            <div\r\n              style={{\r\n                textAlign: 'right',\r\n              }}\r\n            >\r\n              <Button style={{ marginRight: 8 }} onClick={handleCancel}> Cancel </Button>\r\n              <Button type=\"primary\" onClick={clusterCreate}> Submit </Button>\r\n            </div>\r\n          }\r\n        >\r\n          <Collapse accordion>\r\n            <Panel header=\"Cloud Provider & Region\" key=\"1\">\r\n              <img src={allImage} alt=\"AWS logo\" />\r\n            </Panel>\r\n            <Panel header=\"Select RAM and SSD\" key=\"2\">\r\n              <div class=\"instance-table-header\">\r\n                <div class=\"instance-table-header-cell\">Select</div>\r\n                <div class=\"instance-table-header-cell\">RAM</div>\r\n                <div class=\"instance-table-header-cell\">Hard Drive</div>\r\n              </div>\r\n\r\n              {storageList.map((item) => (\r\n                <div>\r\n                  <div class=\"instance-table-info-cell instance-table-info-cell-is-name instance-table-info-cell-is-inner-shadow\">\r\n                    <div>\r\n                      <span>\r\n                        <input type=\"radio\" name=\"gender\" onClick={() => onSelectStorage(item)} />\r\n                        <i class=\"fa instance-table-hardware-circle instance-table-hardware-circle-is-superscript\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"instance-table-info-cell instance-table-info-cell-is-inner-shadow\">{item.ram}</div>\r\n                  <div class=\"instance-table-info-cell instance-table-info-cell-is-inner-shadow\">{item.hardDrive}</div>\r\n                </div>\r\n              ))}\r\n\r\n            </Panel>\r\n            <Panel header=\"Cluster Name\" key=\"3\">\r\n              <Form layout=\"vertical\" hideRequiredMark>\r\n                <label>Cluster Name: </label>\r\n                <Input placeholder=\"Cluster Name\" name='clusterName' value={formData.clusterName} onChange={onChangeText} id='clusterName' />\r\n                <label>User Name: </label>\r\n                <Input placeholder=\"User Name\" name='userName' value={formData.userName} onChange={onChangeText} id='userName' />\r\n                <label>Password: </label>\r\n                <Input.Password placeholder=\"Password\" name='password' value={formData.password} onChange={onChangeText} id='password' />\r\n                <label>Url: </label>\r\n                <Input placeholder=\"Url\" name='url' value={formData.url} onChange={onChangeText} id='url' />\r\n\r\n              </Form>\r\n            </Panel>\r\n            <Panel header=\"Backup\" key=\"4\">\r\n              Backup: <Switch defaultChecked style={{ marginLeft: 8 }} />\r\n            </Panel>\r\n\r\n          </Collapse>\r\n          <Row style={{ marginTop: 15 }}>\r\n            <Col span={6}></Col>\r\n            <Col span={6}></Col>\r\n            <Col span={6}></Col>\r\n            <Col span={6}>\r\n              {isLoadingCreateCluster ? <Button type=\"primary\" loading>Loading</Button>\r\n                : <Button type=\"primary\" onClick={onCreateCluster}>{formData._id === '' ? \"Create Cluster\" : \"Update Cluster\"}</Button>\r\n              }</Col>\r\n          </Row>\r\n        </Drawer>\r\n      }\r\n    </>\r\n  );\r\n};\r\nexport default MongodbCluster;","D:\\Real Loc\\Siramta-Frontend\\src\\ApiService.js",[],{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":41,"column":6,"nodeType":"74","endLine":41,"endColumn":8,"suggestions":"75"},{"ruleId":"76","severity":1,"message":"77","line":47,"column":35,"nodeType":"78","messageId":"79","endLine":47,"endColumn":37},{"ruleId":"72","severity":1,"message":"80","line":17,"column":8,"nodeType":"74","endLine":17,"endColumn":10,"suggestions":"81"},{"ruleId":"72","severity":1,"message":"80","line":18,"column":8,"nodeType":"74","endLine":18,"endColumn":10,"suggestions":"82"},{"ruleId":"83","severity":1,"message":"84","line":2,"column":10,"nodeType":"85","messageId":"86","endLine":2,"endColumn":16},{"ruleId":"72","severity":1,"message":"80","line":18,"column":8,"nodeType":"74","endLine":18,"endColumn":10,"suggestions":"87"},{"ruleId":"72","severity":1,"message":"73","line":44,"column":6,"nodeType":"74","endLine":44,"endColumn":8,"suggestions":"88"},{"ruleId":"76","severity":1,"message":"77","line":53,"column":46,"nodeType":"78","messageId":"79","endLine":53,"endColumn":48},{"ruleId":"72","severity":1,"message":"73","line":41,"column":6,"nodeType":"74","endLine":41,"endColumn":8,"suggestions":"89"},{"ruleId":"76","severity":1,"message":"77","line":47,"column":35,"nodeType":"78","messageId":"79","endLine":47,"endColumn":37},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getCluster'. Either include it or remove the dependency array.","ArrayExpression",["92"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'getClusterDetail'. Either include it or remove the dependency array.",["93"],["94"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar",["95"],["96"],["97"],"no-global-assign","no-unsafe-negation",{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},{"desc":"100","fix":"102"},{"desc":"100","fix":"103"},{"desc":"98","fix":"104"},{"desc":"98","fix":"105"},"Update the dependencies array to be: [getCluster]",{"range":"106","text":"107"},"Update the dependencies array to be: [getClusterDetail]",{"range":"108","text":"109"},{"range":"110","text":"109"},{"range":"111","text":"109"},{"range":"112","text":"107"},{"range":"113","text":"107"},[1238,1240],"[getCluster]",[489,491],"[getClusterDetail]",[552,554],[505,507],[1422,1424],[1248,1250]]